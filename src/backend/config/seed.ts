import { dbService } from './database';
import logger from './logger';
import UserModel from '../models/User.model';
import AchievementModel from '../models/Achievement.model';
import { AchievementType } from '../models/Achievement.model';
import { env } from './env';

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
 */
async function seedAchievements(): Promise<void> {
  const achievementsCount = await AchievementModel.countDocuments();
  
  if (achievementsCount > 0) {
    logger.info('–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é');
    return;
  }

  logger.info('–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π...');

  const achievements = [
    {
      title: '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏',
      description: '–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –ø—Ä–∏–≤—ã—á–∫—É',
      type: AchievementType.HABIT_COUNT,
      icon: 'üå±',
      experienceReward: 50,
      requiredValue: 1,
      isVisible: true,
      isGlobal: true,
    },
    {
      title: '–ù–∞—á–∏–Ω–∞—é—â–∏–π',
      description: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É 5 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
      type: AchievementType.STREAK,
      icon: 'üî•',
      experienceReward: 100,
      requiredValue: 5,
      isVisible: true,
      isGlobal: true,
    },
    {
      title: '–ú–∞—Å—Ç–µ—Ä –ø—Ä–∏–≤—ã—á–µ–∫',
      description: '–°–æ–∑–¥–∞–π—Ç–µ 10 –ø—Ä–∏–≤—ã—á–µ–∫',
      type: AchievementType.HABIT_COUNT,
      icon: 'üèÜ',
      experienceReward: 200,
      requiredValue: 10,
      isVisible: true,
      isGlobal: true,
    },
    {
      title: '–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä',
      description: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ 20 –∑–∞–¥–∞—á',
      type: AchievementType.TASK_COUNT,
      icon: 'üìã',
      experienceReward: 150,
      requiredValue: 20,
      isVisible: true,
      isGlobal: true,
    },
    {
      title: '–£—Ä–æ–≤–µ–Ω—å 5',
      description: '–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 5 —É—Ä–æ–≤–Ω—è',
      type: AchievementType.LEVEL,
      icon: '‚≠ê',
      experienceReward: 300,
      requiredValue: 5,
      isVisible: true,
      isGlobal: true,
    }
  ];

  try {
    await AchievementModel.insertMany(achievements);
    logger.info(`–°–æ–∑–¥–∞–Ω–æ ${achievements.length} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π`);
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: ${error}`);
  }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
 */
async function seedAdminUser(): Promise<void> {
  // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  if (process.env.NODE_ENV !== 'development') {
    return;
  }

  const adminEmail = 'admin@example.com';
  const existingAdmin = await UserModel.findOne({ email: adminEmail });

  if (existingAdmin) {
    logger.info('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é');
    return;
  }

  logger.info('–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');

  try {
    const admin = new UserModel({
      name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
      email: adminEmail,
      password: 'password123', // –ë—É–¥–µ—Ç —Ö–µ—à–∏—Ä–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ —Ö—É–∫ pre-save
      level: 10,
      experience: 1000,
      isAdmin: true
    });

    await admin.save();
    logger.info('–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ${error}`);
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î
 */
export async function seedDatabase(): Promise<void> {
  logger.info('–ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
  
  try {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    await dbService.connect();
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    await seedAchievements();
    await seedAdminUser();
    
    logger.info('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
  } catch (error) {
    logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${error}`);
  }
}

// –í—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é, –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  seedDatabase()
    .then(() => {
      logger.info('–°–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω');
      process.exit(0);
    })
    .catch((error) => {
      logger.error(`–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${error}`);
      process.exit(1);
    });
}

export default seedDatabase; 